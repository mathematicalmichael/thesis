name: Docker

on:
  push:
    branches: [ main ]
    paths:
      - "bin/Dockerfile"
      - "bin/Dockerfile-conda"
      - ".github/workflows/docker.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "bin/Dockerfile"
      - "bin/Dockerfile-conda"
      - ".github/workflows/docker.yml"
  release:
    types: [published, created, edited]

jobs:
  build_latex:
    name: Build Docker image for LaTeX
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/latex-thesis
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag, strip "v" if present.
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}; else
              VERSION=${GITHUB_REF#refs/tags/}
            fi
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Push to DockerHub
        uses: docker/build-push-action@v3.2.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./bin
          file: ./bin/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            USER_ID=1000
            GROUP_ID=1000

      - name: Image digest
        run: echo ${{ steps.push_to_dockerhub.outputs.digest }}

  build_python:
    name: Build Docker image for Python (Fenics)
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/python-thesis
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag, strip "v" if present.
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}; else
              VERSION=${GITHUB_REF#refs/tags/}
            fi
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v2.1.0
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Push to DockerHub
        uses: docker/build-push-action@v3.2.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./bin
          file: ./bin/Dockerfile-conda
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            USER_ID=1000
            GROUP_ID=1000

      - name: Image digest
        run: echo ${{ steps.push_to_dockerhub.outputs.digest }}

